МІНІСТЕРСТВО ОСВІТИ ТА НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
Кафедра Програмної інженерії

ЗВІТ

З дисципліни «Архітектура програмного забезпечення»
З лабораторної роботи №5
На тему: «Розгортання програмної системи»

Виконав: 
ст. гр. ПЗПІ-22-6 
Шараєв Б. О.

Перевірив:
ст. вик. каф. ПІ
Сокорчук І. П.

Харків 2025
2

1 ІСТОРІЯ ЗМІН
Зміни звіту наведені у таблиці 1.1
Таблиця 1.1 – Історія змін
№ Дата Версія звіту Опис змін
1 02.06.2025 0.1 Створено розділ «Історія змін»
2 02.06.2025 0.1 Створено розділ «Завдання»
3 02.06.2025 0.1 Створено розділ “Опис виконаної роботи”
4 02.06.2025 0.1 Створено розділ “Висновки”
5 04.06.2025 0.1 Додані посилання і хронологічний опис
доповіді у Додаток А
6 04.06.2025 0.1 Додано код у Додаток Б
3

2 ЗАВДАННЯ
1. Розгорнути та протестувати програмну систему.
2. Відкрити створений на попередній лабораторній роботі репозиторій
GitHub.
3. Створіть у репозиторії директорію Lab5 та текстовий файл з описом
інженерних рішень у цій частині проєкту.
4. Зафіксуйте кожну внесену зміну командою git commit з відповідним
коментарем та фіксуйте цією командою усі наступні зміни у проекті.
5. Створіть у директорії Lab5 піддиректорію для програмного коду.
6. Створіть програмний код, завантажте його у створену піддиректорію,
зафіксуйте внесені у репозиторій зміни.
7. Виконайте функціональне тестування створеного програмного коду та
створіть відеозапис цього тестування тривалістю 7-10 хвилин з усними
поясненнями процесу тестування.
8. Завантажте створений відеозапис тестування YouTube канал для вашого
облікового запису в домені @nure.ua
9. Створіть для завантаженого запису його хронологічний опис.
10.Оформіть звіт у форматі pdf та завантажте його на навчальну платформу
https://dl.nure.ua/
11.У коментарях до завантаженого звіту вкажіть посилання на відеозапис
тестування у вашому каналі YouTube.
4

3 ОПИС ВИКОНАНОЇ РОБОТИ
Було створено повнофункціональну програмну систему RadGuard, яка
включає мобільний клієнт для Android, веб-клієнт, серверну частину та IoTклієнт. Мобільний клієнт розроблено мовою програмування Java з
використанням Android SDK. Для взаємодії з серверною частиною реалізовано
REST API за допомогою бібліотеки Retrofit, а також авторизацію користувачів
із застосуванням JWT-токенів.
Серверну частину системи реалізовано з використанням фреймворку
Django мовою програмування Python. Для зберігання даних використовується
база даних PostgreSQL. Управління версіями коду здійснюється за допомогою
системи контролю версій Git, код розміщено в репозиторії GitHub. Веб-клієнт
створено з використанням JavaScript-фреймворку React.
IoT-клієнт написано мовою C++ з використанням бібліотеки curl для
надсилання HTTP-запитів до серверу та бібліотека json для парсингу
відповідей. IoT-пристрій автоматично фіксує показники радіації та передає їх
до серверної частини через API.
Для розгортання всієї системи застосовано Docker та Docker Compose.
Для запуску необхідно клонувати репозиторій з GitHub за допомогою команди
git clone https://github.com/NureSharaievBohdan/apz-pzpi-22-6-sharaievbohdan.git, після чого перейти в директорію Lab5 та виконати docker compose
up -d. У конфігураційному файлі Docker Compose визначено сервіси для
серверної та клієнтської частини. Після запуску сервер буде доступний за
адресою 127.0.0.1:8000, а веб-інтерфейс — за адресою 127.0.0.1:3000. Система
є масштабованою та може бути розгорнута на будь-якому комп’ютері з Docker.
5

4 ВИСНОВКИ
Під час виконання лабораторної робти, було розгорнуто програмну
систему RadGuard.
6

ДОДАТОК А
Посилання на відеозапис доповіді та текст хронологічного опису доповіді
Відеозапис доповіді на YouTube: https://youtu.be/1bXePn6VC8k
Хронологічний опис доповіді:
00:00 - Вступна частина.
00:09 - Серверна частина.
00:12 - Створення нового користувача.
00:30 - Вхід користувача.
00:41 - Додавання локації.
01:00 - Веб клієнт.
01:07 - Вхід у систему.
01:27 - Управління сенсорами.
02:11 - Детальна інформація сенсору.
02:21 - Локалізація.
02:55 - ІоТ клієнт.
03:24 - Бізнес логіка веб-клієнту.
03:44 - Створення звітів.
04:41 - Управління локаціями.
05:09 - Сповіщення користувача.
05:34 - Профіль користувача.
06:00 - Адміністрування системи.
07:19 - Адміністрування БД.
07:45 - Мобільний клієнт.
07:51 - Вхід у систему.
08:08 - Управління сенсорами.
08:49 - Сповіщення користувача.
09:00 - Бізнес логіка мобільного клієнта.
